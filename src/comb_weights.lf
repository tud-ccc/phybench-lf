target Cpp;

reactor compute_combw(deadline_time:time(5 msec)) {

    public preamble {=
        #include <stdlib.h>
        #include <stdio.h>
        #include "kernel_def.h"
        #include "uplink.h"
        #include "weight_calc_6.h"
    =}

    input[16] combw_task: task;
    input ver_file: FILE*;

    state numFinished: int(0);
    state maxLayers: int(4);
    output[24] task_computed: task;

    reaction(combw_task) -> task_computed {=
        task taskp;

        if (combw_task[0].is_present()) {
            taskp = (*combw_task[0].get());
            maxLayers = taskp.nmbLayer;
        }

        for (int i=0; i<RX_ANT * maxLayers; i++){
            if (combw_task[i].is_present()) {
                numFinished++;
            }
        }

        if(numFinished == maxLayers * RX_ANT) {
            symbol_data *symbolData = taskp.symbolData;
            int layer, rx, sc, i, ofdm;

            task tasks[(OFDM_IN_SLOT-1)*maxLayers];

            /* It's time to combine all layers and RX calc. Call the Combiner weights
            calc -> will produce a layer X RX_ant X subcarrier matrix. */
            comb_w_calc(symbolData->layer_data, symbolData->nmbSc, maxLayers, symbolData->comb_w);

            /* Unfortunatly, we have to reorder the weights, in order to be
            able to split to comming processing inte layers. We can do this
            either in "comb_w_calc", "ant_comb", or here: */
            for (rx=0; rx<RX_ANT; rx++){
                for (layer=0; layer< maxLayers; layer++){
                    for (sc=0; sc<symbolData->nmbSc; sc++) {
                        symbolData->combWeight[layer][sc][rx] = symbolData->comb_w[sc][layer][rx];
                    }
                }
            }

            /* We have a lot of channel weights, let's process the user data
            for each ofdm symbol and each layer.  In practice, we need to
            be sure that the ofdm symbols are recived from the radio. */
            i = 0;
            for (layer=0; layer< maxLayers; layer++) {
                int ofdm_count = 0;
                for (ofdm = 0; ofdm<OFDM_IN_SLOT; ofdm++) {
                    if (ofdm != 3) {
                        tasks[i].symbolData = symbolData;
                        tasks[i].ofdm = ofdm;
                        tasks[i].ofdm_count = ofdm_count;
                        tasks[i].layer = layer;
                        tasks[i].rx = rx;

                        tasks[i].nmbLayer = maxLayers; // added by JR
                        tasks[i].nmbRB = taskp.nmbRB; // added by JR
                        tasks[i].mod = taskp.mod; // added by JR
                        tasks[i].subframe = taskp.subframe; // added by JR

                        ofdm_count++;

                        // interleave tasks;
                        task_computed[i % 24].set(tasks[i]);
                        i++;
                    }
                }
            }
            numFinished = 0;
        }
    =}
    deadline(deadline_time) {=

    =}

}